import { Movies } from '.'

let movies

beforeEach(async () => {
  movies = await Movies.create({ Title: 'test', Year: 'test', Rated: 'test', Released: 'test', Runtime: 'test', Genre: 'test', Director: 'test', Writer: 'test', Actors: 'test', Plot: 'test', Language: 'test', Country: 'test', Awards: 'test', Poster: 'test', Ratings: 'test', Metascore: 'test', imdbRating: 'test', imdbVotes: 'test', imdbID: 'test', Type: 'test', DVD: 'test', BoxOffice: 'test', Production: 'test', Website: 'test', Response: 'test' })
})

describe('view', () => {
  it('returns simple view', () => {
    const view = movies.view()
    expect(typeof view).toBe('object')
    expect(view.id).toBe(movies.id)
    expect(view.Title).toBe(movies.Title)
    expect(view.Year).toBe(movies.Year)
    expect(view.Rated).toBe(movies.Rated)
    expect(view.Released).toBe(movies.Released)
    expect(view.Runtime).toBe(movies.Runtime)
    expect(view.Genre).toBe(movies.Genre)
    expect(view.Director).toBe(movies.Director)
    expect(view.Writer).toBe(movies.Writer)
    expect(view.Actors).toBe(movies.Actors)
    expect(view.Plot).toBe(movies.Plot)
    expect(view.Language).toBe(movies.Language)
    expect(view.Country).toBe(movies.Country)
    expect(view.Awards).toBe(movies.Awards)
    expect(view.Poster).toBe(movies.Poster)
    expect(view.Ratings).toBe(movies.Ratings)
    expect(view.Metascore).toBe(movies.Metascore)
    expect(view.imdbRating).toBe(movies.imdbRating)
    expect(view.imdbVotes).toBe(movies.imdbVotes)
    expect(view.imdbID).toBe(movies.imdbID)
    expect(view.Type).toBe(movies.Type)
    expect(view.DVD).toBe(movies.DVD)
    expect(view.BoxOffice).toBe(movies.BoxOffice)
    expect(view.Production).toBe(movies.Production)
    expect(view.Website).toBe(movies.Website)
    expect(view.Response).toBe(movies.Response)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })

  it('returns full view', () => {
    const view = movies.view(true)
    expect(typeof view).toBe('object')
    expect(view.id).toBe(movies.id)
    expect(view.Title).toBe(movies.Title)
    expect(view.Year).toBe(movies.Year)
    expect(view.Rated).toBe(movies.Rated)
    expect(view.Released).toBe(movies.Released)
    expect(view.Runtime).toBe(movies.Runtime)
    expect(view.Genre).toBe(movies.Genre)
    expect(view.Director).toBe(movies.Director)
    expect(view.Writer).toBe(movies.Writer)
    expect(view.Actors).toBe(movies.Actors)
    expect(view.Plot).toBe(movies.Plot)
    expect(view.Language).toBe(movies.Language)
    expect(view.Country).toBe(movies.Country)
    expect(view.Awards).toBe(movies.Awards)
    expect(view.Poster).toBe(movies.Poster)
    expect(view.Ratings).toBe(movies.Ratings)
    expect(view.Metascore).toBe(movies.Metascore)
    expect(view.imdbRating).toBe(movies.imdbRating)
    expect(view.imdbVotes).toBe(movies.imdbVotes)
    expect(view.imdbID).toBe(movies.imdbID)
    expect(view.Type).toBe(movies.Type)
    expect(view.DVD).toBe(movies.DVD)
    expect(view.BoxOffice).toBe(movies.BoxOffice)
    expect(view.Production).toBe(movies.Production)
    expect(view.Website).toBe(movies.Website)
    expect(view.Response).toBe(movies.Response)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })
})
